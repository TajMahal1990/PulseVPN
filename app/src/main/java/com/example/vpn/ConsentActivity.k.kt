package com.example.vpn

import android.app.Activity
import androidx.compose.ui.platform.LocalContext

import androidx.compose.foundation.Image
import androidx.compose.ui.res.painterResource

import android.content.Context
import android.content.Intent
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Lock

import androidx.compose.ui.draw.clip

import android.net.Uri
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.ClickableText
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

class ConsentActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val prefs = getSharedPreferences("prefs", Context.MODE_PRIVATE)
        val agreed = prefs.getBoolean("consent_given", false)

        if (agreed) {
            startActivity(Intent(this, MainActivity::class.java))
            finish()
        }

        setContent {
            // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—ë–º —Ç—ë–º–Ω—É—é —Ç–µ–º—É, –∫–∞–∫ –≤ MainActivity
            MaterialTheme(
                colorScheme = darkColorScheme(
                    background = Color(0xFF0A0F1C),
                    surface = Color(0xFF0A0F1C),
                    onBackground = Color.White,
                    onSurface = Color.White,
                    primary = Color(0xFF00FFC8)
                )
            ) {
                ConsentScreen {
                    prefs.edit().putBoolean("consent_given", true).apply()
                    startActivity(Intent(this, MainActivity::class.java))
                    finish()
                }
            }
        }
    }
}
@Composable
fun ConsentScreen(onAgree: () -> Unit) {
    val context = LocalContext.current
    var showDialog by remember { mutableStateOf(false) }

    Surface(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF0A0F1C))
    ) {
        Box(modifier = Modifier.fillMaxSize()) {
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                item {
                    // üîô –ù–∞–∑–∞–¥
                    Spacer(modifier = Modifier.height(48.dp))
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .clickable { showDialog = true },
                        contentAlignment = Alignment.TopStart
                    ) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "–ù–∞–∑–∞–¥",
                            tint = Color.White,
                            modifier = Modifier.size(28.dp)
                        )
                    }

                    Spacer(modifier = Modifier.height(24.dp))

                    // üî∑ –õ–æ–≥–æ
                    Image(
                        painter = painterResource(id = R.drawable.vpnlogo__1_),
                        contentDescription = null,
                        modifier = Modifier.size(100.dp)
                    )

                    Spacer(modifier = Modifier.height(24.dp))

                    // üü¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    Text(
                        text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PulseVPN",
                        color = Color.White,
                        fontSize = 20.sp,
                        fontWeight = FontWeight.Bold,
                        textAlign = TextAlign.Center,
                        modifier = Modifier.fillMaxWidth()
                    )

                    Spacer(modifier = Modifier.height(24.dp))

                    // üìò –°—Ç—Ä–æ–∫–∞ 1: –ü–æ–ª–∏—Ç–∏–∫–∞ (annotated)
                    val policyText = buildAnnotatedString {
                        append("–ü—Ä–æ—á—Ç–∏—Ç–µ –Ω–∞—à—É ")
                        pushStringAnnotation("tag", "policy")
                        withStyle(SpanStyle(color = Color(0xFF00FFC8))) {
                            append("–ü–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.")
                        }
                        pop()
                    }
                    ClickableText(
                        text = policyText,
                        style = TextStyle(
                            color = Color(0xFFB0BEC5),
                            fontSize = 15.sp,
                            textAlign = TextAlign.Center
                        ),
                        modifier = Modifier.fillMaxWidth(),
                        onClick = { offset ->
                            policyText.getStringAnnotations("tag", offset, offset).firstOrNull()?.let {
                                context.startActivity(
                                    Intent(Intent.ACTION_VIEW, Uri.parse("https://yourusername.github.io/pulsevpn-policy/privacy-policy"))
                                )
                            }
                        }
                    )

                    Spacer(modifier = Modifier.height(4.dp))

                    // –°—Ç—Ä–æ–∫–∞ 2, 3, 4
                    Text(
                        text = "–ù–∞–∂–º–∏—Ç–µ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —á—Ç–æ–±—ã",
                        color = Color(0xFFB0BEC5),
                        fontSize = 15.sp,
                        textAlign = TextAlign.Center,
                        modifier = Modifier.fillMaxWidth()
                    )
                    Text(
                        text = "–ø—Ä–∏–Ω—è—Ç—å",
                        color = Color(0xFFB0BEC5),
                        fontSize = 15.sp,
                        textAlign = TextAlign.Center,
                        modifier = Modifier.fillMaxWidth()
                    )

                    val termsText = buildAnnotatedString {
                        pushStringAnnotation("tag", "terms")
                        withStyle(SpanStyle(color = Color(0xFF00FFC8))) {
                            append("–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
                        }
                        pop()
                    }
                    ClickableText(
                        text = termsText,
                        style = TextStyle(
                            fontSize = 15.sp,
                            textAlign = TextAlign.Center
                        ),
                        modifier = Modifier.fillMaxWidth(),
                        onClick = { offset ->
                            termsText.getStringAnnotations("tag", offset, offset).firstOrNull()?.let {
                                context.startActivity(
                                    Intent(Intent.ACTION_VIEW, Uri.parse("https://yourusername.github.io/pulsevpn-policy/terms-of-use"))
                                )
                            }
                        }
                    )

                    Spacer(modifier = Modifier.height(24.dp))

                    // üìÑ –û–ø–∏—Å–∞–Ω–∏–µ
                    Text(
                        text = "–ü—Ä–∏–Ω–∏–º–∞—è –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã PulseVPN.",
                        color = Color(0xFFB0BEC5),
                        fontSize = 12.sp,
                        lineHeight = 18.sp
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "–ú—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç–∞–∫—É—é –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, —Ç—Ä–µ—Ç—å–µ–π —Å—Ç–æ—Ä–æ–Ω–µ –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ü–µ–ª—è—Ö.",
                        color = Color(0xFFB0BEC5),
                        fontSize = 12.sp,
                        lineHeight = 18.sp
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "–í—Å–µ —Å–æ–±–∏—Ä–∞–µ–º—ã–µ –Ω–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –∞–Ω–æ–Ω–∏–º–Ω—ã –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–∏–∫–∞–∫–æ–π –ª–∏—á–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                        color = Color(0xFFB0BEC5),
                        fontSize = 12.sp,
                        lineHeight = 18.sp
                    )
                    Spacer(modifier = Modifier.height(32.dp))
                }

                // üü¶ –ö–Ω–æ–ø–∫–∞
                item {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp)
                            .clip(RoundedCornerShape(16.dp))
                            .background(
                                Brush.horizontalGradient(
                                    colors = listOf(Color(0xFF00FFC8), Color(0xFF0078A0))
                                )
                            )
                            .clickable { onAgree() },
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è & –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                            color = Color.Black,
                            fontSize = 16.sp,
                            fontWeight = FontWeight.Bold
                        )
                    }
                    Spacer(modifier = Modifier.height(32.dp))
                }
            }

            // üí¨ –î–∏–∞–ª–æ–≥ –≤—ã—Ö–æ–¥–∞
            if (showDialog) {
                AlertDialog(
                    onDismissRequest = { showDialog = false },
                    title = {
                        Text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?", color = Color.White)
                    },
                    text = {
                        Text(
                            "–°–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ Google Play, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —É—Å–ª—É–≥–∏, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã. –ï—Å–ª–∏ –≤—ã –ø–æ–∫–∏–Ω–µ—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ.",
                            color = Color(0xFFB0BEC5)
                        )
                    },
                    confirmButton = {
                        TextButton(onClick = {
                            (context as? Activity)?.finish()
                        }) {
                            Text("–í—ã–π—Ç–∏", color = Color(0xFFFF5252))
                        }
                    },
                    dismissButton = {
                        TextButton(onClick = { showDialog = false }) {
                            Text("–û—Ç–º–µ–Ω–∞", color = Color(0xFF00FFC8))
                        }
                    },
                    containerColor = Color(0xFF1A1F2E)
                )
            }
        }
    }
}
